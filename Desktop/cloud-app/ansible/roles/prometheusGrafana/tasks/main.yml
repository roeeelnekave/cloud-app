---
- name: Update system packages
  apt:
    update_cache: yes

- name: Create a system group for Prometheus
  group:
    name: "{{ prometheus_group }}"
    system: yes

- name: Create a system user for Prometheus
  user:
    name: "{{ prometheus_user }}"
    shell: /sbin/nologin
    system: yes
    group: "{{ prometheus_group }}"

- name: Create directories for Prometheus
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ prometheus_user }}"
    group: "{{ prometheus_group }}"
  loop:
    - "{{ prometheus_config_dir }}"
    - "{{ prometheus_data_dir }}"

- name: Download Prometheus
  get_url:
    url: "https://github.com/prometheus/prometheus/releases/download/v{{ prometheus_version }}/prometheus-{{ prometheus_version }}.linux-amd64.tar.gz"
    dest: /tmp/prometheus.tar.gz

- name: Extract Prometheus
  unarchive:
    src: /tmp/prometheus.tar.gz
    dest: /tmp
    remote_src: yes

- name: Move Prometheus binaries
  command: mv /tmp/prometheus-2.43.0.linux-amd64/{{ item }} "{{ prometheus_install_dir }}/"
  loop:
    - prometheus
    - promtool

- name: Remove existing console_libraries directory
  file:
    path: "{{ prometheus_config_dir }}/console_libraries"
    state: absent
    
- name: Remove existing console directory
  file:
    path: "{{ prometheus_config_dir }}/consoles"
    state: absent

- name: Remove existing prometheus.yml file
  file:
    path: "{{ prometheus_config_dir }}/prometheus.yml"
    state: absent

- name: Move configuration files
  command: mv /tmp/prometheus-2.43.0.linux-amd64/{{ item }} "{{ prometheus_config_dir }}/"
  loop:
    - prometheus.yml
    - consoles
    - console_libraries


- name: Set ownership for configuration files
  file:
    path: "{{ prometheus_config_dir }}/{{ item }}"
    owner: "{{ prometheus_user }}"
    group: "{{ prometheus_group }}"
    state: directory
  loop:
    - consoles
    - console_libraries

- name: Create Prometheus systemd service file
  template:
    src: prometheus.service.j2
    dest: /etc/systemd/system/prometheus.service
  become: true

- name: Reload systemd
  command: systemctl daemon-reload
  become: true

- name: Enable and start Prometheus service
  systemd:
    name: prometheus
    enabled: yes
    state: started
  become: true 

- name: Update Packages
  apt:
    update_cache: yes
  tags: packages

- name: Install Packages
  apt:
    name: "{{ item }}"
    state: present
  loop: "{{ packages }}"
  tags: packages

- name: Ensure /etc/apt/keyrings/ directory exists
  file:
    path: /etc/apt/keyrings/
    state: directory
    mode: '0755'
  become: true
  tags: create_directory

- name: Check if Grafana GPG key already exists
  stat:
    path: /etc/apt/keyrings/grafana.gpg.key
  register: grafana_gpg_key_stat
  tags: check_gpg_key

- name: Remove existing Grafana GPG key
  file:
    path: /etc/apt/keyrings/grafana.gpg.key
    state: absent
  when: grafana_gpg_key_stat.stat.exists
  tags: remove_existing_gpg_key
  
- name: Download Grafana GPG key
  ansible.builtin.get_url:
    url: https://apt.grafana.com/gpg.key
    dest: /tmp/grafana.gpg.key
  tags: download_gpg_key

- name: Convert Grafana GPG key to binary format
  ansible.builtin.command: |
    gpg --dearmor -o /etc/apt/keyrings/grafana.gpg /tmp/grafana.gpg.key
  become: true
  tags: dearmor_gpg_key

- name: Clean up temporary GPG key file
  ansible.builtin.file:
    path: /tmp/grafana.gpg.key
    state: absent
  tags: cleanup_gpg_key

- name: Add Grafana stable repository
  ansible.builtin.lineinfile:
    path: /etc/apt/sources.list.d/grafana.list
    line: 'deb [signed-by=/etc/apt/keyrings/grafana.gpg] https://apt.grafana.com stable main'
    create: yes
  become: true
  tags: add_stable_repo

- name: Add Grafana beta repository (optional)
  ansible.builtin.lineinfile:
    path: /etc/apt/sources.list.d/grafana.list
    line: 'deb [signed-by=/etc/apt/keyrings/grafana.gpg] https://apt.grafana.com beta main'
    create: yes
  become: true
  tags: add_beta_repo

- name: Update the list of available packages
  ansible.builtin.apt:
    update_cache: yes
  become: true
  tags: update_package_list

- name: Install grafana
  apt:
    name: "{{ item }}"
    state: present
  loop: "{{ grafana }}"
  tags: grafana

- name: Ensure Grafana server is enabled and started
  ansible.builtin.systemd:
    name: grafana-server
    enabled: yes
    state: started
  become: true
  tags: grafana_server

- name: Check Grafana server status
  ansible.builtin.systemd:
    name: grafana-server
    state: started
  register: grafana_status
  become: true
  tags: check_grafana_status

- name: Display Grafana server status
  ansible.builtin.debug:
    var: grafana_status
  tags: display_grafana_status

# - name: Remove default Nginx configuration
#   file:
#     path: /etc/nginx/sites-enabled/default
#     state: absent
#   become: true
#   tags: remove_default_nginx_config

# - name: Deploy Grafana Nginx configuration
#   template:
#     src: grafana.conf.j2
#     dest: /etc/nginx/sites-available/grafana.conf

# - name: Enable Grafana Nginx configuration
#   file:
#     src: /etc/nginx/sites-available/grafana.conf
#     dest: /etc/nginx/sites-enabled/grafana.conf
#     state: link
#   become: true
#   tags: enable_grafana_nginx_config

# - name: Test Nginx configuration
#   command: nginx -t
#   become: true
#   tags: test_nginx_config

# - name: Restart Nginx
#   service:
#     name: nginx
#     state: restarted
#   become: true
#   tags: restart_nginx

# - name: Obtain SSL certificates with Certbot
#   command: certbot --nginx -d {{ domain_name }} --non-interactive --agree-tos --email rijanitesh78@gmail.com
#   register: certbot_result
#   ignore_errors: true
#   become: true
